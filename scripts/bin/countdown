#! /usr/bin/env bash

# Display a countdown
# Possible syntax:
# countdown until 13:40 -- Time from now until the next occurence of 13:40 (parsed by date)
# countdown 30m 10s -- 30 minute and 10 seconds countdown


# Parse the time with date
# Allows for syntax like `countodwn until tomorrow 13:00`
parseAbsolute() {
	dateAfter=$(date +%s --date "$@") # Date of the countodwn end in seconds
}

# Given argument in a form like `3h 30m 24s`, it will set the `dateAfter` to the appropriate
# time relative to now.
# Can parse seconds (s), minutes (m), hours (m). Anything without a suffix is considered a second.
parseSleepLike() {
	seconds=0 # Specified time in seconds
	while [[ $# -ge 1 ]]
	do
		number=${1:0: -1}
		suffix=${1: -1}
		case $suffix in
			s)
				seconds=$(( $seconds + $number ))
				;;
			m)
				seconds=$(( $seconds + $number * 60 ))
				;;
			h)
				seconds=$(( $seconds + $number * 60 * 60 ))
				;;
			*)
				number=${number}${suffix}
				seconds=$(( $seconds + $number ))
				;;
		esac
		shift
	done
	dateAfter=$(($(date +%s) + $seconds));
}

parseArguments() {
	parseMode="relative"

	# While there are remaining arguments, `--` was not parsed and the argument is an option
	while [[ $# -ge 1 ]] && [[ "$1" != '--' ]] && [[ "$1" =~ ^- ]]; do
		case $1 in
			"--pauseStartCmd" | "-s")
				pauseStartCommand="$2"
				shift
				;;
			"--pauseStopCmd" | "-e")
				pauseStopCommand="$2"
				shift
				;;
			"--until" | "-u")
				parseMode="absolute"
				;;
			"--relative" | "-r")
				parseMode="relative"
				;;
			*)
				echo "Invalid argument: $1"
				exit 1
				;;
		esac
		shift
	done
	case $parseMode in
		"relative")
			parseSleepLike $@;; # Here I *want* to re-split the arguments
		"absolute")
			parseAbsolute "$@";;
		*)
			echo "Invalid parse mode: $parseMode"
			exit 1
			;;
	esac
}

parseArguments "$@"

EXITCODE=0

echo -e "Counting down $seconds seconds until $(date --date @${dateAfter} +'%F %T')..."
while [[ "$dateAfter" > `date +%s` ]]; do
	echo -ne "\033[2K" # clear the line
	echo -ne "$(date -u --date @$(($dateAfter - `date +%s`)) +%H:%M:%S)\r";
	read -r -n 1 -s -t 0.1 input
	case $input in
		a) # abort
			EXITCODE=2
			break
			;;
		p) # pause
			# Block until the next input of "p"
			pauseStart=$(date +%s)
			eval "$pauseStartCommand"
			while :; do
				read -r -n 1 -s -t 0.1 input
				if [[ "$input" == "p" ]]; then
					break
				fi
			done
			pauseDuration=$(($(date +%s) - $pauseStart))
			eval "$pauseStopCommand"
			dateAfter=$(($dateAfter + $pauseDuration))
			;;
	esac
done
echo -ne "\033[2K" # clear the line

exit $EXITCODE
