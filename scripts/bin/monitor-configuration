#!/bin/bash
# Original: https://github.com/codingtony/udev-monitor-hotplug

declare -a monitors

# Recognize my beamer (for hdmi audio)
beamer_edid="00ffffffffffff003674010be9030000
00100103804627780a1990a755469824
10494b2108008bc0814081c061400101
010101010101011d007251d01e206e28
5500c48e2100001e011d8018711c1620
582c2500c48e2100009e000000fc0050
524f4a4543544f52530a2020000000fd
0016500e5b10000a20202020202001e1
02031df24a0102038405101293141f23
0907078301000065030c0010008c0ad0
8a20e02d10103e9600138e2100001801
1d00bc52d01e20b8285540c48e210000
1e011d80d0721c1620102c2580c48e21
00009e8c0ad08a20e02d10103e9600c4
8e210000188c0ad090204031200c4055
00c48e2100001800000000000000002b"


# Apparently this is sometimes needed for new monitors
# to be recognized
xrandr >/dev/null 2>&1

# Append a monitor to the array of monitors
register_monitor() {
	monitors+=("$1")
}

# Search for a monitor in the array of monitors
is_registered() {
	local monitor
	for monitor in "${monitors[@]}"; do
		[[ "$monitor" == "$1" ]] && return 0
	done
	return 1
}

# Check if the arguments are exactly the monitors that are currently plugged in
check_setup() {
	# The number of monitors have to match
	[[ ${#monitors[@]} -ne $# ]] && return 1
	# And every argument has to be in the monitors list
	for arg in "$@"; do
		is_registered "$arg" || return 1
	done

	# If the funciton hasn't returned yet, the arrays' length and the individual items match
	return 0
}

# finds all plugged in monitors and adds them to the monitors array
find_monitors() {
	local devices=$(find /sys/class/drm/*/status)
	while read -r l
	do
		dir="$(dirname "$l")"
		status="$(cat "$l")"
		dev="$(echo "$dir" | cut -d- -f 2-)"

		if [ "$(expr match  "$dev" "HDMI")" != "0" ]
		then
			#REMOVE THE -X- part from HDMI-X-n
			dev=HDMI${dev#HDMI-?-}
		else 
			dev="$(echo "$dev" | tr -d '-')"
		fi

		if [ "connected" == "$status" ]
		then 
			echo "$dev" "connected"
			register_monitor "$dev"
		fi
	done <<< "$devices"
}

configure_monitors_for_host() {
	# Make sure HOST is set
	HOST=${HOST:-"$(</etc/hostname)"}

	# xrandr is a bit slow sometimes and hdmi-audio needs some time, too
	sleep 2
	if [[ $HOST = 'ArchPad' ]]; then
		configure_monitors_for_archpad
	elif [[ $HOST = 'ArchDesk' ]]; then
		configure_monitors_for_archdesk
	else
		>&2 echo 'Unknown Host, can''t configure monitors.'
	fi
}

configure_monitors_for_archpad() {
	if check_setup "eDP1" "DP2" "HDMI1"; then
		echo "eDP1 and DP2 and HDMI1 are connected"
		xrandr --output eDP1 --auto
		xrandr --output HDMI1 --auto --primary --left-of eDP1
		xrandr --output DP2 --auto --right-of eDP1
		bspc monitor 'eDP1' --rename 1
		bspc monitor 'HDMI1' --rename 2
		bspc monitor 'DP2' --rename 3
		bspc monitor 1 --reset-desktops I II
		bspc monitor 2 --reset-desktops III IV V VI
		bspc monitor 3 --reset-desktops VII VIII IX X
	elif check_setup "eDP1" "HDMI1"; then
		echo "eDP1 and HDMI1 are connected"
		xrandr --output eDP1 --auto
		xrandr --output HDMI1 --auto --primary --right-of eDP1
		xrandr --output DP2 --auto --off
		bspc monitor 'eDP1' --rename 1
		bspc monitor 'HDMI1' --rename 2
		bspc monitor 1 --reset-desktops I II III IV V
		bspc monitor 2 --reset-desktops VI VII VIII IX X
	elif check_setup "eDP1" "DP2"; then
		echo "eDP1 and DP2 are connected"
		xrandr --output eDP1 --auto
		xrandr --output DP2 --auto --primary --right-of eDP1
		xrandr --output HDMI1 --auto --off
		bspc monitor 'eDP1' --rename 1
		bspc monitor 'DP2' --rename 2
		bspc monitor 1 --reset-desktops I II III IV V
		bspc monitor 2 --reset-desktops VI VII VIII IX X
	elif check_setup "eDP1" "DP2"; then
		echo "eDP1 and DP2 are connected"
		xrandr --output eDP1 --auto
		xrandr --output HDMI1 --off
		xrandr --output DP2 --auto --primary --right-of eDP1
		bspc monitor 'eDP1' --rename 1
		bspc monitor 'DP2' --rename 2
		bspc monitor 1 --reset-desktops I II III IV V
		bspc monitor 2 --reset-desktops VI VII VIII IX X
	elif check_setup "eDP1"; then
		echo "Only the internal eDP1 is connected"
		xrandr --output eDP1 --auto --primary
		xrandr --output HDMI1 --off
		xrandr --output DP2 --auto --off
		bspc monitor 'eDP1' --rename 1
		bspc monitor 1 --reset-desktops I II III IV V VI VII VIII IX X
	else
		echo "No known monitor setup cuold be detected." | /usr/bin/systemd-cat --priority="crit"
	fi

	cur_edid="$(xrandr --prop | grep -Pzo 'HDMI1 connected.*\n\tEDID: (\n\t{2}[0-9a-f]{32})*' | grep -Po '[0-9a-f]{32}')"

	echo "$cur_edid" > /home/timo/cur-edid
	if [[ "$beamer_edid" == "$cur_edid" ]]; then
		# /home/timo/bin/hdmi-audio on
		~/bin/pa_movesinks 0
	else
		# /home/timo/bin/hdmi-audio off
		~/bin/pa_movesinks 1
	fi
}

configure_monitors_for_archdesk() {
	if check_setup "DVII2" "HDMI4"; then
		echo "DVI-1 and HDMI-4 are connected"
		xrandr --output DVI-1 --auto
		xrandr --output HDMI-3 --auto --primary --right-of DVI-1
		bspc monitor 'HDMI-3' --rename 1
		bspc monitor 'DVI-1' --rename 2
		bspc monitor 1 --reset-desktops I II III IV V
		bspc monitor 2 --reset-desktops VI VII VIII IX X
		# HDMI-0 is detected as HDMI1, but xrandr knows it as HDMI-0
	elif check_setup "DVII2" "HDMI1"; then
		echo "DVI-1 and HDMI-0 are connected"
		xrandr --output DVI-1 --auto
		xrandr --output HDMI-0 --auto --primary --right-of DVI-1
		bspc monitor 'HDMI-0' --rename 1
		bspc monitor 'DVI-1' --rename 2
		bspc monitor 1 --reset-desktops I II III IV V
		bspc monitor 2 --reset-desktops VI VII VIII IX X
	elif check_setup "DVII2"; then
		echo "DVI-1 is connected"
		xrandr --output DVI-1 --auto
		xrandr --output HDMI-1 --off
		xrandr --output HDMI-3 --off
		bspc monitor 'DVI-1' --rename 1
		bspc monitor 1 --reset-desktops I II III IV V VI VII VIII IX X
		# HDMI4 and HDMI1 are the same monitor, which is somehow sometimes labelled differently
	elif check_setup "HDMI-4"; then
		echo "HDMI-4 is connected"
		xrandr --output HDMI-3 --auto
		xrandr --output DVI-1 --off
		bspc monitor 'HDMI-3' --rename 1
		bspc monitor 1 --reset-desktops I II III IV V VI VII VIII IX X
	else
		echo "No known monitor setup cuold be detected." | /usr/bin/systemd-cat --priority="crit"
	fi
}

monitors_have_changed() {
	local monitor_file="/tmp/monitors"
	if [[ -e "$monitor_file" ]]; then
		local old_monitors=$(<"$monitor_file")
	else
		local old_monitors=""
	fi

	if [[ "${monitors[@]}" != "$old_monitors" ]]; then
		echo "${monitors[@]}" > "$monitor_file"
		return 0
	else
		return 1
	fi
}

find_monitors
if [[ "$1" == "-f" ]] || monitors_have_changed; then
	echo "Updating monitor configuration"
	configure_monitors_for_host
else
	echo "Monitors unchanged."
	exit 2
fi
