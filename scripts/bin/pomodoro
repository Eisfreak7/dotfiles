#!/usr/bin/env bash
# Use taskwarrior in combination with the pomodoro technique.
# the arguments are passed to taskwarrior as a filter

COMPLETE_SOUND='/usr/share/sounds/freedesktop/stereo/complete.oga'
START_SOUND='/usr/share/sounds/freedesktop/stereo/bell.oga'

parse_options() {
	ROUNDS=3
	PAUSE_DURATION='5m'
	ROUND_DURATION='25m'
	PLAY_SOUND=0

	# While there are remaining arguments, `--` was not parsed and the argument is an option
	while [[ $# -ge 1 ]] && [[ "$1" != '--' ]] && [[ "$1" =~ ^- ]]; do
		case $1 in
			"--rounds" | "-r")
				ROUNDS="$2"
				shift
				;;
			"-r"*)
				ROUNDS="${1#'-r'}"
				;;
			"--pauseDuration" | "-p")
				PAUSE_DURATION="$2"
				shift
				;;
			"-p"*)
				PAUSE_DURATION="${1#'-p'}"
				;;
			"--roundDuration" | "-d")
				ROUND_DURATION="$2"
				shift
				;;
			"-d"*)
				ROUND_DURATION="${1#'-d'}"
				;;
			"--sound" | "-s")
				PLAY_SOUND=1
				;;
			*)
				echo "Invalid argument: $1"
				exit 1
				;;
		esac
		shift
	done


	# Get UUID
	local old=$IFS
	IFS=$'\n'
	local result=""
	# the surrounding parenthesis turn the newline-seperated tasks in the format
	# uuid:description into an array
	local uuids=($(task \
		rc.verbose=no \
		rc.defaultwidth=0 \
		rc.report._pomodoro.columns=uuid,due.countdown,description \
		rc.report._pomodoro.sort='urgency-,entry+' \
		rc.report._pomodoro.filter='status:pending limit:10' \
		_pomodoro \
		"$@" \
		| awk '{printf $1":"; for(i=2;i<=NF;i++)printf $i" "; print ""}'
		2>/dev/null))
	local count=${#uuids[@]}
	if [[ $count -eq 0 ]]; then
		echo "No item matches this filter."
		exit 1
	elif [[ $count -gt 1 ]]; then
		echo "The filter is ambigous. Please select a match out of the following:"
		local counter=0
		for task in "${uuids[@]}"; do
			# Echo the index and the description
			echo "[$counter] ${task#*:}"
			((counter++))
		done
		read -r selection
		result=${uuids[$selection]}
		echo "$result"
	else
		result=${uuids[0]}
	fi
	IFS=$old
	# return only the uuid
	uuid=${result%:*}
}

play_sound_notification() {
	if [[ $PLAY_SOUND -ne 1 ]]; then return; fi

	resume_cmd=""
	if [[ $(mpv status | grep -c 'playing' ) -gt 0 ]]; then
		resume_cmd="mpc play"
		mpc pause;
	fi
	mpv "$1" >/dev/null 2>&1
	eval "$resume_cmd"
}

start_task() {
	task start "$uuid" 2>/dev/null
}

stop_task() {
	if [[ $(task active "$uuid" 2>/dev/null | wc -l) != 0 ]]; then # Only stop when active
		task stop "$uuid" 2>/dev/null
	fi
}

parse_options "$@"
echo "$@"

echo "Starting pomodoro timer for the following task:"
task rc.gc=off rc.verbose=no status:pending "$uuid" 2>/dev/null
trap 'break' SIGTERM SIGINT
for (( i=2; i <= ROUNDS+1; i++)); do
	start_task
	# Needs the countdown script
	countdown --pauseStartCmd "task stop \"$uuid\"" --pauseStopCmd "task start \"$uuid\"" "$ROUND_DURATION"
	play_sound_notification $COMPLETE_SOUND
	if [[ "$?" == 0 ]]; then # Only ask when countdown exited normally (no abort)
		notify-send --app-name=Pomodoro "Time's up" "Time to relax"
		echo "Enough."
		read -r -n1 -p "Finished working? Press any key to continue." item
		echo # newline
	fi
	stop_task
	if [[ $i -gt "$ROUNDS" ]]; then # Don't pause the last time
		break
	fi
	case "$item" in
		n|N) break ;;
		*) countdown "$PAUSE_DURATION" ;;
	esac
	play_sound_notification $START_SOUND
	notify-send --app-name=Pomodoro "Time's up" "Time to work"
	echo "Time for round $i."
	read -r -n 1 -p "Ready? [Y/n]" item
	echo # newline
	case "$item" in
		n|N) break;;
	esac
done
stop_task

read -r -n 1 -p "Task done? [y/N]" item
echo # newline
case "$item" in
	y|Y) task 'done' "$uuid" 2>/dev/null ;;
esac
