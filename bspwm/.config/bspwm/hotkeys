# To be loaded as an extra configuration with sxhkd
#
# bspwm hotkeys
#

super + e ; e
	pkill -x panel; bspc quit

# super + shift + r
# 	~/.config/bspwm/bspwmrc

super + w
	bspc node --close

super + t
	bspc desktop --layout next

super + shift +  b
	bspc node --balance

super + {p,f,s}
	bspc node --state '~{floating,fullscreen,pseudo_tiled}'

super + {q,Tab}
	bspc {node,desktop} --focus last

super + {o,i}
	bspc wm --record-history off; \
	bspc node {older,newer} --focus; \
	bspc wm --record-history on

super + y
	bspc node --to-node last.!automatic

super + shift + m
	bspc node --swap biggest

# be able to focus an empty monitor
# for details on this (and the window moving) see
# http://blog.neeasade.net/2015/04/28/BSPWM-Multihead.html
super + {h,j,k,l}
	bspc config pointer_follows_monitor true; \
	bspc config pointer_follows_focus true; \
	dir={west,south,north,east}; \
	if ! bspc node --focus $dir; then \
		bspc monitor --focus $dir; \
	fi; \
	bspc config pointer_follows_monitor false; \
	bspc config pointer_follows_focus false

# move the window in an i3-like manner
# for example, windows can be moved to an empty monitor and when
# doing so they keep the focus
super + shift + {h,j,k,l}
	bspc config pointer_follows_focus true; \
	cur_win=$(bspc query -N -n) \
	cur_mon=$(bspc query -M -m); \
	dir={west,south,north,east}; \
# move to an empty monitor
	if ! bspc node --focus $dir; then \
		bspc node --to-monitor $dir; \
		bspc monitor --focus $dir; \
	else \
		new_mon=$(bspc query -M -m); \
# if the target is on another (non-empty) monitor
		if [[ "$new_mon" = "$cur_mon" ]]; then \
			bspc node -s $cur_win; \
		else \
			bspc node $cur_win --to-monitor "$new_mon"; \
		fi; \
		bspc node --focus $cur_win; \
	fi; \
	bspc config pointer_follows_focus false

super + shift + ctrl + {h,j,k,l}
	bspc desktop --to-monitor {left,down,up,right} && \
	bspc desktop --focus last; \
	bspc monitor -o $(bspc query -D -m focused | sort | awk 'BEGIN \{found_IX = 0; found_X = 0\} \{if ($1 == "IX") found_IX=1; else if ($1 == "X") found_X=1; else print $1\} END \{if (found_IX == 1) print "IX"; if (found_X == 1) print "X"\}')
# This is a **very** ugly hack to sort roman numbers (up to 10). Don't look at it too long
# or your brain may take damage.

super + {_,shift + }c
	bspc node --focus {next,prev}

# super + {comma,period}
# 	bspc node --circulate {backward,forward}

super + comma
	"$TERMCMD" -e make_placeholder_tmp '*'

super + bracket{left,right}
	bspc desktop --focus {prev,next}

super + ctrl + {h,j,k,l}
	bspc node --presel-dir {west,south,north,east}

super + ctrl + space
	bspc node --presel-dir cancel

super + r : {k,h}
	bspc node @{north,west} --ratio -10

super + r : {j,l}
	bspc node @{south,east} --ratio +10

super + r : shift + {k,h}
	bspc node @{south,east} --ratio -10

super + r : shift + {j,l}
	bspc node @{north,west} --ratio +10

super + ctrl + {1-9}
	bspc node --ratio 0.{1-9}

super + shift {1-9,0}
	bspc node --to-desktop '{I,II,III,IV,V,VI,VII,VIII,IX,X}'

super + {1-9,0}
	item="{I,II,III,IV,V,VI,VII,VIII,IX,X}"; \
	bspc query --desktops --desktop "$\{item\}.focused" > /dev/null && item=last; \
	bspc desktop --focus "$item"

~button1
	bspc pointer --grab focus

super + button{1-3}
	bspc pointer -g {move,resize_side,resize_corner}

super + @button{1-3}
	bspc pointer -u

super + shift + b : {plus,minus}
	bspc config --desktop focused window_gap $(($(bspc config -d focused window_gap) {+,-} 5))
